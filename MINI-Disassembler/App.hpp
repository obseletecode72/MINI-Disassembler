namespace App {
    namespace State {
        bool list_processes_window_open = false;
        bool show_modules_window = false;
        DWORD selected_pid = 0;
        HANDLE process_handle = nullptr;
        HMODULE selected_module = nullptr;
        uintptr_t module_base = 0;
        size_t module_size = 0;
        bool needs_process_refresh = true;
        bool needs_module_refresh = true;
        std::vector<std::pair<DWORD, std::string>> cached_processes;
        std::vector<std::tuple<HMODULE, std::string, uintptr_t, size_t>> cached_modules;
        HANDLE previous_process_handle_for_modules = nullptr;
        std::atomic<bool> is_analyzing = false;
        std::string analysis_status_message = "";
        bool analysis_results_valid = false;
        std::vector<DataTypes::FunctionInfo> functions;
        std::map<uintptr_t, std::string> function_address_to_name;
        DataTypes::FunctionInfo selected_function;
        std::string function_filter;
        bool show_graph_window = false;
        bool show_instruction_addresses = true;
        bool show_function_list_column = true;
        uintptr_t layout_function_address = 0;
        std::map<std::string, ImVec2> node_positions;
        std::map<std::string, ImVec2> node_sizes;
        std::vector<std::pair<std::string, std::string>> edges;
        std::map<std::pair<std::string, std::string>, std::vector<std::array<ImVec2, 4>>> edge_curves;
        float current_zoom = 1.0f;
        ImVec2 current_view_offset = { 0, 0 };
        ImVec2 initial_centering_offset = { 0, 0 };
        bool is_dragging_node = false;
        std::string dragged_node_id = "";
        ImVec2 drag_node_start_offset_world = { 0,0 };
        bool is_panning = false;
        ImVec2 pan_start_mouse_pos = { 0,0 };
        ImVec2 pan_start_view_offset = { 0,0 };
        std::map<std::string, std::vector<std::pair<uintptr_t, std::string>>> block_instructions;
        std::map<std::string, std::string> block_titles;
        bool show_xrefs_window = false;
        uintptr_t xrefs_target_function_address = 0;
        std::string xrefs_target_function_name = "";
        std::map<uintptr_t, std::map<uintptr_t, int>> xrefs_data;
        std::map<uintptr_t, std::string> resolved_iat_targets;
        ID3D11Device* pd3dDevice = nullptr;
        ID3D11DeviceContext* pd3dDeviceContext = nullptr;
        IDXGISwapChain* pSwapChain = nullptr;
        ID3D11RenderTargetView* pMainRenderTargetView = nullptr;
        ImFont* g_CodeFont = nullptr;
        ZydisDecoder decoder;
        ZydisFormatter formatter;
        bool zydis_initialized = false;
        std::string process_filter;
        std::string module_filter;
    }
}